// Try: Make a function we can jump to 
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
{{#participants}}
#define PAR_{{id}} addr [ADDR_PAR_{{id}}]
{{/participants}}

// Check for NoOp
// -------------------
txn OnCompletion
int NoOp
==
bnz main

// Check for Delete
// -------------------
txn OnCompletion
int DeleteApplication
==
bnz delete

err // disallow all other tx types

main:
// Get token state
TOKEN_STATE // needed later
TOKEN_STATE
app_global_get 

// init if necessary
// -------------------
dup 
int 0
==
bnz init

{{#manualTransitions}}

// TASK {{id}}
// --------------------
txna ApplicationArgs 0
btoi
int {{id}}
==
bnz task_{{id}}
{{/manualTransitions}}

err // fall through

{{#manualTransitions}}
// ----------------------------------------------------------
task_{{id}}:
// Check task is enabled
dup // duplicate current token state on stack
int {{consume}}
&
int {{consume}}
==
{{#condition}}
// Check conditions
txna ApplicationArgs 1
btoi
int {{condition}}
&
int {{condition}}
==
&&
{{/condition}}
// Check participant is allowed
txn Sender 
PAR_{{initiator}}
==

&& // Check previous
assert // return if zero

// consume and produce
int {{consume}}
~
&
int {{produce}} 
|
b auto_loop
{{/manualTransitions}}

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
{{#autonomousTransitions}}
// --------------------
// Transition
dup
int {{consume}}
&
int {{consume}}
==
{{#condition}}
// Check conditions
txna ApplicationArgs 1
btoi
int {{condition}}
&
int {{condition}}
==
&&
{{/condition}}

bnz auto_{{consume}}

{{/autonomousTransitions}}
// no autonomous transitions to be fired

app_global_put
int 1
return

{{#autonomousTransitions}}
auto_{{consume}}:
// consume and produce
int {{consume}}
~
&
int {{produce}} 
|
b auto_loop
{{/autonomousTransitions}}

init:
pop
int 1
app_global_put
int 1
return 

delete:
TOKEN_STATE
app_global_get 
int 0
==