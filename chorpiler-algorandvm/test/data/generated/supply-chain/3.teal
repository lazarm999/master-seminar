// Try: Make a function we can jump to
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
#define PAR_0 addr 6SS2RSI7R65OGTLPJ5MLTQF7YYA7GL4MHE6BGZRKKSDJLWFYSTX5FW6Z2M
#define PAR_1 addr V2HY7PE7YKNDDYQHOABAO72JCXK2C6BXFPEMYA6OHXLR2A2MPPLN5KNJYQ
#define PAR_2 addr 36ZZKJGPE7CWCBX225MZH36HVRMEEE5EDBLSRIPLD3EPLY5EPNJMSEW4IU
#define PAR_3 addr 2T7MRCOFBHIP733ODKRSYE7SAWMTIFEEAKOADOSWGPYSP6FKVGQSVDSDYY
#define PAR_4 addr 4TKPLR5GNGO6ECYXCZDTDSUPX3EFUBYWYUJJNYZQPENUY3HUO6ULYUTGRI

#define RANGE int 8

#define OFFSET txna ApplicationArgs 2; btoi; RANGE; *; 
#define EXTRACT OFFSET; RANGE; box_extract; btoi; // extracts S[OFFSET;BYTES]

txn ApplicationID
int 0 
==
bnz return

// Check for NoOp
// -------------------
txn OnCompletion
int NoOp
==
assert

TOKEN_STATE
box_get
bz create

main:
// Get token state
TOKEN_STATE // save key
TOKEN_STATE // load key "s", "s" 
EXTRACT // "s", int


// TASK 0
// --------------------
txna ApplicationArgs 0
btoi
int 0
==
bnz task_0

// TASK 1
// --------------------
txna ApplicationArgs 0
btoi
int 1
==
bnz task_1

// TASK 2
// --------------------
txna ApplicationArgs 0
btoi
int 2
==
bnz task_2

// TASK 3
// --------------------
txna ApplicationArgs 0
btoi
int 3
==
bnz task_3

// TASK 4
// --------------------
txna ApplicationArgs 0
btoi
int 4
==
bnz task_4

// TASK 5
// --------------------
txna ApplicationArgs 0
btoi
int 5
==
bnz task_5

// TASK 6
// --------------------
txna ApplicationArgs 0
btoi
int 6
==
bnz task_6

// TASK 7
// --------------------
txna ApplicationArgs 0
btoi
int 7
==
bnz task_7

// TASK 8
// --------------------
txna ApplicationArgs 0
btoi
int 8
==
bnz task_8

err // fall through

// ----------------------------------------------------------
task_0:
// Check task is enabled
dup // duplicate current token state on stack
int 1
&
int 1
==
// Check participant is allowed
txn Sender 
PAR_0
==

&& // Check previous
assert // return if zero

// consume and produce
int 1
~
&
int 2 
|
b auto_loop
// ----------------------------------------------------------
task_1:
// Check task is enabled
dup // duplicate current token state on stack
int 2
&
int 2
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 2
~
&
int 4 
|
b auto_loop
// ----------------------------------------------------------
task_2:
// Check task is enabled
dup // duplicate current token state on stack
int 8
&
int 8
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 8
~
&
int 0 
|
b auto_loop
// ----------------------------------------------------------
task_3:
// Check task is enabled
dup // duplicate current token state on stack
int 4
&
int 4
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 4
~
&
int 16 
|
b auto_loop
// ----------------------------------------------------------
task_4:
// Check task is enabled
dup // duplicate current token state on stack
int 32
&
int 32
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 32
~
&
int 8 
|
b auto_loop
// ----------------------------------------------------------
task_5:
// Check task is enabled
dup // duplicate current token state on stack
int 16
&
int 16
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 16
~
&
int 64 
|
b auto_loop
// ----------------------------------------------------------
task_6:
// Check task is enabled
dup // duplicate current token state on stack
int 64
&
int 64
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 64
~
&
int 128 
|
b auto_loop
// ----------------------------------------------------------
task_7:
// Check task is enabled
dup // duplicate current token state on stack
int 128
&
int 128
==
// Check participant is allowed
txn Sender 
PAR_4
==

&& // Check previous
assert // return if zero

// consume and produce
int 128
~
&
int 256 
|
b auto_loop
// ----------------------------------------------------------
task_8:
// Check task is enabled
dup // duplicate current token state on stack
int 256
&
int 256
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 256
~
&
int 32 
|
b auto_loop

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
// --------------------
// Transition
dup
int 16
&
int 16
==
// Check conditions
txna ApplicationArgs 1
btoi
int 1
&
int 1
==
&&

bnz auto_16

// --------------------
// Transition
dup
int 64
&
int 64
==
// Check conditions
txna ApplicationArgs 1
btoi
int 2
&
int 2
==
&&

bnz auto_64

// --------------------
// Transition
dup
int 4
&
int 4
==
// Check conditions
txna ApplicationArgs 1
btoi
int 4
&
int 4
==
&&

bnz auto_4

// no autonomous transitions to be fired

// switch stack positions for replace 3
store 0
OFFSET
load 0
// "s", byte, Offset, int
itob // "s", byte (A), int (B), byte (C)
box_replace // "s", byte
int 1
return

auto_16:
// consume and produce
int 16
~
&
int 32 
|
b auto_loop
auto_64:
// consume and produce
int 64
~
&
int 256 
|
b auto_loop
auto_4:
// consume and produce
int 4
~
&
int 8 
|
b auto_loop

create: // "s"
TOKEN_STATE
int 128
box_create
TOKEN_STATE
int 0
byte "\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01"
box_replace // "s", byte
b main

return:
int 1
return