// Try: Make a function we can jump to 
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
#define PAR_0 addr [ADDR_PAR_0]
#define PAR_1 addr [ADDR_PAR_1]
#define PAR_2 addr [ADDR_PAR_2]
#define PAR_3 addr [ADDR_PAR_3]
#define PAR_4 addr [ADDR_PAR_4]

// Check for NoOp
// -------------------
txn OnCompletion
int NoOp
==
bnz main

// Check for Delete
// -------------------
txn OnCompletion
int DeleteApplication
==
bnz delete

err // disallow all other tx types

main:
// Get token state
TOKEN_STATE // needed later
TOKEN_STATE
app_global_get 

// init if necessary
// -------------------
dup 
int 0
==
bnz init


// TASK 0
// --------------------
txna ApplicationArgs 0
btoi
int 0
==
bnz task_0

// TASK 1
// --------------------
txna ApplicationArgs 0
btoi
int 1
==
bnz task_1

// TASK 2
// --------------------
txna ApplicationArgs 0
btoi
int 2
==
bnz task_2

// TASK 3
// --------------------
txna ApplicationArgs 0
btoi
int 3
==
bnz task_3

// TASK 4
// --------------------
txna ApplicationArgs 0
btoi
int 4
==
bnz task_4

// TASK 5
// --------------------
txna ApplicationArgs 0
btoi
int 5
==
bnz task_5

// TASK 6
// --------------------
txna ApplicationArgs 0
btoi
int 6
==
bnz task_6

// TASK 7
// --------------------
txna ApplicationArgs 0
btoi
int 7
==
bnz task_7

// TASK 8
// --------------------
txna ApplicationArgs 0
btoi
int 8
==
bnz task_8

// TASK 9
// --------------------
txna ApplicationArgs 0
btoi
int 9
==
bnz task_9

err // fall through

// ----------------------------------------------------------
task_0:
// Check task is enabled
dup // duplicate current token state on stack
int 1
&
int 1
==
// Check participant is allowed
txn Sender 
PAR_0
==

&& // Check previous
assert // return if zero

// consume and produce
int 1
~
&
int 2 
|
b auto_loop
// ----------------------------------------------------------
task_1:
// Check task is enabled
dup // duplicate current token state on stack
int 2
&
int 2
==
// Check participant is allowed
txn Sender 
PAR_4
==

&& // Check previous
assert // return if zero

// consume and produce
int 2
~
&
int 12 
|
b auto_loop
// ----------------------------------------------------------
task_2:
// Check task is enabled
dup // duplicate current token state on stack
int 4
&
int 4
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 4
~
&
int 16 
|
b auto_loop
// ----------------------------------------------------------
task_3:
// Check task is enabled
dup // duplicate current token state on stack
int 8
&
int 8
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 8
~
&
int 32 
|
b auto_loop
// ----------------------------------------------------------
task_4:
// Check task is enabled
dup // duplicate current token state on stack
int 64
&
int 64
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 64
~
&
int 128 
|
b auto_loop
// ----------------------------------------------------------
task_5:
// Check task is enabled
dup // duplicate current token state on stack
int 128
&
int 128
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 128
~
&
int 256 
|
b auto_loop
// ----------------------------------------------------------
task_6:
// Check task is enabled
dup // duplicate current token state on stack
int 256
&
int 256
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 256
~
&
int 512 
|
b auto_loop
// ----------------------------------------------------------
task_7:
// Check task is enabled
dup // duplicate current token state on stack
int 512
&
int 512
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 512
~
&
int 1024 
|
b auto_loop
// ----------------------------------------------------------
task_8:
// Check task is enabled
dup // duplicate current token state on stack
int 1024
&
int 1024
==
// Check participant is allowed
txn Sender 
PAR_4
==

&& // Check previous
assert // return if zero

// consume and produce
int 1024
~
&
int 2048 
|
b auto_loop
// ----------------------------------------------------------
task_9:
// Check task is enabled
dup // duplicate current token state on stack
int 2048
&
int 2048
==
// Check participant is allowed
txn Sender 
PAR_4
==

&& // Check previous
assert // return if zero

// consume and produce
int 2048
~
&
int 0 
|
b auto_loop

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
// --------------------
// Transition
dup
int 48
&
int 48
==

bnz auto_48

// no autonomous transitions to be fired

app_global_put
int 1
return

auto_48:
// consume and produce
int 48
~
&
int 64 
|
b auto_loop

init:
pop
int 1
app_global_put
int 1
return 

delete:
TOKEN_STATE
app_global_get 
int 0
==